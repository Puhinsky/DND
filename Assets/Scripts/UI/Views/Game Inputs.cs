//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.0
//     from Assets/Input/Game Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace Puhinsky.DND.UI
{
    public partial class @GameInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game Inputs"",
    ""maps"": [
        {
            ""name"": ""Game Map"",
            ""id"": ""a86baa1f-686d-439f-9255-ac8135814a50"",
            ""actions"": [
                {
                    ""name"": ""Game Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""90fb2a06-51d4-453f-aa01-40125eef76d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""49cb3627-ad95-41e1-8ac7-16c0d4343d36"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""22807f61-8044-4142-b403-20f22224cd7a"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""94ec323f-ef32-4160-9aae-43404feae020"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset Camera"",
                    ""type"": ""Button"",
                    ""id"": ""8118bb91-3faa-41be-ae12-7ae6e0a0fc1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""88e8b57b-c2fc-4a08-a5ce-ff31742fa6ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7a72328-d091-4940-8710-2115ec53df35"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Game Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d3dd62e-756a-45e2-880a-a38dfa371097"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6a6a13b-6efc-46ea-9d4d-a7953c296203"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""Camera Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fc7cba9-b2e4-4320-b141-14ec884afdcb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59eedad2-c4ed-4717-a9ec-450698e61599"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e62228f-bc56-481e-9071-a42357e9763d"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Game Map
            m_GameMap = asset.FindActionMap("Game Map", throwIfNotFound: true);
            m_GameMap_GameToggle = m_GameMap.FindAction("Game Toggle", throwIfNotFound: true);
            m_GameMap_Zoom = m_GameMap.FindAction("Zoom", throwIfNotFound: true);
            m_GameMap_CameraMove = m_GameMap.FindAction("Camera Move", throwIfNotFound: true);
            m_GameMap_RightMouse = m_GameMap.FindAction("Right Mouse", throwIfNotFound: true);
            m_GameMap_ResetCamera = m_GameMap.FindAction("Reset Camera", throwIfNotFound: true);
            m_GameMap_Delete = m_GameMap.FindAction("Delete", throwIfNotFound: true);
        }

        ~@GameInputs()
        {
            Debug.Assert(!m_GameMap.enabled, "This will cause a leak and performance issues, GameInputs.GameMap.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Game Map
        private readonly InputActionMap m_GameMap;
        private List<IGameMapActions> m_GameMapActionsCallbackInterfaces = new List<IGameMapActions>();
        private readonly InputAction m_GameMap_GameToggle;
        private readonly InputAction m_GameMap_Zoom;
        private readonly InputAction m_GameMap_CameraMove;
        private readonly InputAction m_GameMap_RightMouse;
        private readonly InputAction m_GameMap_ResetCamera;
        private readonly InputAction m_GameMap_Delete;
        public struct GameMapActions
        {
            private @GameInputs m_Wrapper;
            public GameMapActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @GameToggle => m_Wrapper.m_GameMap_GameToggle;
            public InputAction @Zoom => m_Wrapper.m_GameMap_Zoom;
            public InputAction @CameraMove => m_Wrapper.m_GameMap_CameraMove;
            public InputAction @RightMouse => m_Wrapper.m_GameMap_RightMouse;
            public InputAction @ResetCamera => m_Wrapper.m_GameMap_ResetCamera;
            public InputAction @Delete => m_Wrapper.m_GameMap_Delete;
            public InputActionMap Get() { return m_Wrapper.m_GameMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameMapActions set) { return set.Get(); }
            public void AddCallbacks(IGameMapActions instance)
            {
                if (instance == null || m_Wrapper.m_GameMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameMapActionsCallbackInterfaces.Add(instance);
                @GameToggle.started += instance.OnGameToggle;
                @GameToggle.performed += instance.OnGameToggle;
                @GameToggle.canceled += instance.OnGameToggle;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @CameraMove.started += instance.OnCameraMove;
                @CameraMove.performed += instance.OnCameraMove;
                @CameraMove.canceled += instance.OnCameraMove;
                @RightMouse.started += instance.OnRightMouse;
                @RightMouse.performed += instance.OnRightMouse;
                @RightMouse.canceled += instance.OnRightMouse;
                @ResetCamera.started += instance.OnResetCamera;
                @ResetCamera.performed += instance.OnResetCamera;
                @ResetCamera.canceled += instance.OnResetCamera;
                @Delete.started += instance.OnDelete;
                @Delete.performed += instance.OnDelete;
                @Delete.canceled += instance.OnDelete;
            }

            private void UnregisterCallbacks(IGameMapActions instance)
            {
                @GameToggle.started -= instance.OnGameToggle;
                @GameToggle.performed -= instance.OnGameToggle;
                @GameToggle.canceled -= instance.OnGameToggle;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
                @CameraMove.started -= instance.OnCameraMove;
                @CameraMove.performed -= instance.OnCameraMove;
                @CameraMove.canceled -= instance.OnCameraMove;
                @RightMouse.started -= instance.OnRightMouse;
                @RightMouse.performed -= instance.OnRightMouse;
                @RightMouse.canceled -= instance.OnRightMouse;
                @ResetCamera.started -= instance.OnResetCamera;
                @ResetCamera.performed -= instance.OnResetCamera;
                @ResetCamera.canceled -= instance.OnResetCamera;
                @Delete.started -= instance.OnDelete;
                @Delete.performed -= instance.OnDelete;
                @Delete.canceled -= instance.OnDelete;
            }

            public void RemoveCallbacks(IGameMapActions instance)
            {
                if (m_Wrapper.m_GameMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameMapActions instance)
            {
                foreach (var item in m_Wrapper.m_GameMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameMapActions @GameMap => new GameMapActions(this);
        public interface IGameMapActions
        {
            void OnGameToggle(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnCameraMove(InputAction.CallbackContext context);
            void OnRightMouse(InputAction.CallbackContext context);
            void OnResetCamera(InputAction.CallbackContext context);
            void OnDelete(InputAction.CallbackContext context);
        }
    }
}
